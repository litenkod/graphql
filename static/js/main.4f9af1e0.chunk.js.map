{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","countryName","filter","GET_COUNTRY","gql","useQuery","variables","name","data","loading","error","Fragment","className","htmlFor","type","id","onChange","e","target","value","Country","map","item","index","key","src","flag","svgFile","alt","Boolean","window","location","hostname","match","cache","InMemoryCache","link","HttpLink","uri","client","ApolloClient","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"4gBA6CeA,MAxCf,WAAgB,IAAD,EACgBC,mBAAS,IADzB,mBACPC,EADO,KACMC,EADN,KAERC,EAAcC,IAAH,KAFH,EAamBC,YAASF,EAAa,CAAEG,UAAW,CAAEC,KAAMN,KAApEO,EAbM,EAaNA,KAIP,OAjBa,EAaAC,QAbA,EAaSC,MAKpB,kBAAC,IAAMC,SAAP,KACA,gCACE,wCAEF,yBAAKC,UAAU,kBACb,2BAAOC,QAAQ,UAAf,UACA,2BAAOC,KAAK,OAAOC,GAAG,SAAUC,SAAU,SAACC,GAAD,OAAOf,EAAOe,EAAEC,OAAOC,QAAQA,MAAOlB,KAElF,yBAAKW,UAAU,aACZJ,GACCA,EAAKY,QAAQC,KAAI,SAACC,EAAMC,GAAP,OACf,yBAAKC,IAAKD,EAAOX,UAAU,QACvB,4BAAKU,EAAKf,MAEV,yBAAKkB,IAAKH,EAAKI,KAAKC,QAASC,IAAKN,EAAKf,cCzBjCsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,mCCPAC,EAAQ,IAAIC,IACZC,EAAO,IAAIC,IAAS,CAExBC,IAAK,+CAGDC,EAAS,IAAIC,IAAa,CAC9BN,QACAE,SAGFK,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAgBJ,OAAQA,GAAQ,kBAAC,EAAD,QAElCK,SAASC,eAAe,SDyGpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA1C,GACL2C,QAAQ3C,MAAMA,EAAM4C,c","file":"static/js/main.4f9af1e0.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\nimport { useQuery } from '@apollo/react-hooks';\nimport gql from \"graphql-tag\";\n\nfunction App() {\n\tconst [countryName, filter] = useState('');\n\tconst GET_COUNTRY = gql`\n\tquery SelectedCountry($name: String) {\n\t\tCountry (filter: {name_contains: $name}){\n\t\t\tname\n\t\t\tcapital\n\t\t\tflag{\n\t\t\t\tsvgFile\n\t\t\t}\n\t\t}\n\t}\n\t`\n\tconst { data, loading, error } = useQuery(GET_COUNTRY, { variables: { name: countryName } });\n\t// if(error) return <p>Error</p>\n\t// if(loading) return <p>loading...</p>\n\t\n  return (\n    <React.Fragment>\n    <header>\n      <h1>Country</h1>\n    </header>\n    <div className=\"search-wrapper\">\n      <label htmlFor=\"search\">Search</label>\n      <input type=\"text\" id=\"search\"  onChange={(e) => filter(e.target.value)} value={countryName}/>\n    </div>\n    <div className=\"container\">\n      {data &&\n        data.Country.map((item, index) => (\n          <div key={index} className=\"item\">\n              <h3>{item.name}</h3>\n\t\t\t\t\t\t\t{/* <h4>{item.capital}</h4> */}\n              <img src={item.flag.svgFile} alt={item.name} />\n          </div>\n        ))}\n    </div>\n  </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { ApolloClient } from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { HttpLink } from 'apollo-link-http';\nimport { ApolloProvider } from '@apollo/react-hooks';\n\nconst cache = new InMemoryCache();\nconst link = new HttpLink({\n  //uri: 'https://graphql-pokemon.now.sh/'\n  uri: 'https://countries-274616.ew.r.appspot.com/'\n});\n\nconst client = new ApolloClient({\n  cache,\n  link\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <ApolloProvider client={client}><App /></ApolloProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}